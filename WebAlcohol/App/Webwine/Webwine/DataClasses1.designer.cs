#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Webwine
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Webwine")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertOrder_P(Order_P instance);
    partial void UpdateOrder_P(Order_P instance);
    partial void DeleteOrder_P(Order_P instance);
    partial void InsertOrigin(Origin instance);
    partial void UpdateOrigin(Origin instance);
    partial void DeleteOrigin(Origin instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertSpecial(Special instance);
    partial void UpdateSpecial(Special instance);
    partial void DeleteSpecial(Special instance);
    partial void InsertTrademark(Trademark instance);
    partial void UpdateTrademark(Trademark instance);
    partial void DeleteTrademark(Trademark instance);
    partial void InsertType_Product(Type_Product instance);
    partial void UpdateType_Product(Type_Product instance);
    partial void DeleteType_Product(Type_Product instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["WebwineConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<Order_P> Order_Ps
		{
			get
			{
				return this.GetTable<Order_P>();
			}
		}
		
		public System.Data.Linq.Table<Origin> Origins
		{
			get
			{
				return this.GetTable<Origin>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<Special> Specials
		{
			get
			{
				return this.GetTable<Special>();
			}
		}
		
		public System.Data.Linq.Table<Trademark> Trademarks
		{
			get
			{
				return this.GetTable<Trademark>();
			}
		}
		
		public System.Data.Linq.Table<Type_Product> Type_Products
		{
			get
			{
				return this.GetTable<Type_Product>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.insertdata")]
		public int insertdata([global::System.Data.Linq.Mapping.ParameterAttribute(Name="NameP", DbType="NVarChar(100)")] string nameP, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ImageP", DbType="NVarChar(200)")] string imageP, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CostP", DbType="Int")] System.Nullable<int> costP, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> capacityP, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> concnetrationP, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TrademarkP", DbType="NVarChar(50)")] string trademarkP, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="OriginP", DbType="NVarChar(50)")] string originP, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SpecialP", DbType="NVarChar(50)")] string specialP, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Type_ProductP", DbType="NVarChar(50)")] string type_ProductP)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), nameP, imageP, costP, capacityP, concnetrationP, trademarkP, originP, specialP, type_ProductP);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.login_account")]
		public int login_account([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Char(100)")] string username, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Char(100)")] string password)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), username, password);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.regist_account")]
		public int regist_account([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Char(100)")] string username, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Char(100)")] string password, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(100)")] string address, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> phone)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), username, password, address, phone);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Username;
		
		private string _Password;
		
		private string _address;
		
		private int _phone;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    partial void OnphoneChanging(int value);
    partial void OnphoneChanged();
    #endregion
		
		public Account()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="Char(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="Char(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone", DbType="Int NOT NULL")]
		public int phone
		{
			get
			{
				return this._phone;
			}
			set
			{
				if ((this._phone != value))
				{
					this.OnphoneChanging(value);
					this.SendPropertyChanging();
					this._phone = value;
					this.SendPropertyChanged("phone");
					this.OnphoneChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Order_P")]
	public partial class Order_P : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdOr;
		
		private int _IdP;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdOrChanging(int value);
    partial void OnIdOrChanged();
    partial void OnIdPChanging(int value);
    partial void OnIdPChanged();
    #endregion
		
		public Order_P()
		{
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdOr", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdOr
		{
			get
			{
				return this._IdOr;
			}
			set
			{
				if ((this._IdOr != value))
				{
					this.OnIdOrChanging(value);
					this.SendPropertyChanging();
					this._IdOr = value;
					this.SendPropertyChanged("IdOr");
					this.OnIdOrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdP", DbType="Int NOT NULL")]
		public int IdP
		{
			get
			{
				return this._IdP;
			}
			set
			{
				if ((this._IdP != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPChanging(value);
					this.SendPropertyChanging();
					this._IdP = value;
					this.SendPropertyChanged("IdP");
					this.OnIdPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Order_P", Storage="_Product", ThisKey="IdP", OtherKey="IdP", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Order_Ps.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Order_Ps.Add(this);
						this._IdP = value.IdP;
					}
					else
					{
						this._IdP = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Origin")]
	public partial class Origin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdO;
		
		private string _Name;
		
		private EntitySet<Product> _Products;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdOChanging(int value);
    partial void OnIdOChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Origin()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdO", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdO
		{
			get
			{
				return this._IdO;
			}
			set
			{
				if ((this._IdO != value))
				{
					this.OnIdOChanging(value);
					this.SendPropertyChanging();
					this._IdO = value;
					this.SendPropertyChanged("IdO");
					this.OnIdOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Origin_Product", Storage="_Products", ThisKey="IdO", OtherKey="IdO")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Origin = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Origin = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Product")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdP;
		
		private System.Nullable<int> _IdS;
		
		private int _IdT;
		
		private int _IdO;
		
		private string _Name;
		
		private string _Images;
		
		private string _Cost;
		
		private System.Nullable<int> _capacity;
		
		private System.Nullable<double> _concnetration;
		
		private int _IdTp;
		
		private EntitySet<Order_P> _Order_Ps;
		
		private EntityRef<Origin> _Origin;
		
		private EntityRef<Special> _Special;
		
		private EntityRef<Trademark> _Trademark;
		
		private EntityRef<Type_Product> _Type_Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdPChanging(int value);
    partial void OnIdPChanged();
    partial void OnIdSChanging(System.Nullable<int> value);
    partial void OnIdSChanged();
    partial void OnIdTChanging(int value);
    partial void OnIdTChanged();
    partial void OnIdOChanging(int value);
    partial void OnIdOChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnImagesChanging(string value);
    partial void OnImagesChanged();
    partial void OnCostChanging(string value);
    partial void OnCostChanged();
    partial void OncapacityChanging(System.Nullable<int> value);
    partial void OncapacityChanged();
    partial void OnconcnetrationChanging(System.Nullable<double> value);
    partial void OnconcnetrationChanged();
    partial void OnIdTpChanging(int value);
    partial void OnIdTpChanged();
    #endregion
		
		public Product()
		{
			this._Order_Ps = new EntitySet<Order_P>(new Action<Order_P>(this.attach_Order_Ps), new Action<Order_P>(this.detach_Order_Ps));
			this._Origin = default(EntityRef<Origin>);
			this._Special = default(EntityRef<Special>);
			this._Trademark = default(EntityRef<Trademark>);
			this._Type_Product = default(EntityRef<Type_Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdP", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdP
		{
			get
			{
				return this._IdP;
			}
			set
			{
				if ((this._IdP != value))
				{
					this.OnIdPChanging(value);
					this.SendPropertyChanging();
					this._IdP = value;
					this.SendPropertyChanged("IdP");
					this.OnIdPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdS", DbType="Int")]
		public System.Nullable<int> IdS
		{
			get
			{
				return this._IdS;
			}
			set
			{
				if ((this._IdS != value))
				{
					if (this._Special.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdSChanging(value);
					this.SendPropertyChanging();
					this._IdS = value;
					this.SendPropertyChanged("IdS");
					this.OnIdSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdT", DbType="Int NOT NULL")]
		public int IdT
		{
			get
			{
				return this._IdT;
			}
			set
			{
				if ((this._IdT != value))
				{
					if (this._Trademark.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTChanging(value);
					this.SendPropertyChanging();
					this._IdT = value;
					this.SendPropertyChanged("IdT");
					this.OnIdTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdO", DbType="Int NOT NULL")]
		public int IdO
		{
			get
			{
				return this._IdO;
			}
			set
			{
				if ((this._IdO != value))
				{
					if (this._Origin.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdOChanging(value);
					this.SendPropertyChanging();
					this._IdO = value;
					this.SendPropertyChanged("IdO");
					this.OnIdOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Images", DbType="NVarChar(200)")]
		public string Images
		{
			get
			{
				return this._Images;
			}
			set
			{
				if ((this._Images != value))
				{
					this.OnImagesChanging(value);
					this.SendPropertyChanging();
					this._Images = value;
					this.SendPropertyChanged("Images");
					this.OnImagesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost", DbType="Char(20)")]
		public string Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged("Cost");
					this.OnCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_capacity", DbType="Int")]
		public System.Nullable<int> capacity
		{
			get
			{
				return this._capacity;
			}
			set
			{
				if ((this._capacity != value))
				{
					this.OncapacityChanging(value);
					this.SendPropertyChanging();
					this._capacity = value;
					this.SendPropertyChanged("capacity");
					this.OncapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_concnetration", DbType="Float")]
		public System.Nullable<double> concnetration
		{
			get
			{
				return this._concnetration;
			}
			set
			{
				if ((this._concnetration != value))
				{
					this.OnconcnetrationChanging(value);
					this.SendPropertyChanging();
					this._concnetration = value;
					this.SendPropertyChanged("concnetration");
					this.OnconcnetrationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdTp", DbType="Int NOT NULL")]
		public int IdTp
		{
			get
			{
				return this._IdTp;
			}
			set
			{
				if ((this._IdTp != value))
				{
					if (this._Type_Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTpChanging(value);
					this.SendPropertyChanging();
					this._IdTp = value;
					this.SendPropertyChanged("IdTp");
					this.OnIdTpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Order_P", Storage="_Order_Ps", ThisKey="IdP", OtherKey="IdP")]
		public EntitySet<Order_P> Order_Ps
		{
			get
			{
				return this._Order_Ps;
			}
			set
			{
				this._Order_Ps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Origin_Product", Storage="_Origin", ThisKey="IdO", OtherKey="IdO", IsForeignKey=true)]
		public Origin Origin
		{
			get
			{
				return this._Origin.Entity;
			}
			set
			{
				Origin previousValue = this._Origin.Entity;
				if (((previousValue != value) 
							|| (this._Origin.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Origin.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._Origin.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._IdO = value.IdO;
					}
					else
					{
						this._IdO = default(int);
					}
					this.SendPropertyChanged("Origin");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Special_Product", Storage="_Special", ThisKey="IdS", OtherKey="IdS", IsForeignKey=true)]
		public Special Special
		{
			get
			{
				return this._Special.Entity;
			}
			set
			{
				Special previousValue = this._Special.Entity;
				if (((previousValue != value) 
							|| (this._Special.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Special.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._Special.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._IdS = value.IdS;
					}
					else
					{
						this._IdS = default(Nullable<int>);
					}
					this.SendPropertyChanged("Special");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Trademark_Product", Storage="_Trademark", ThisKey="IdT", OtherKey="IdT", IsForeignKey=true)]
		public Trademark Trademark
		{
			get
			{
				return this._Trademark.Entity;
			}
			set
			{
				Trademark previousValue = this._Trademark.Entity;
				if (((previousValue != value) 
							|| (this._Trademark.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Trademark.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._Trademark.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._IdT = value.IdT;
					}
					else
					{
						this._IdT = default(int);
					}
					this.SendPropertyChanged("Trademark");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Type_Product_Product", Storage="_Type_Product", ThisKey="IdTp", OtherKey="IdTp", IsForeignKey=true)]
		public Type_Product Type_Product
		{
			get
			{
				return this._Type_Product.Entity;
			}
			set
			{
				Type_Product previousValue = this._Type_Product.Entity;
				if (((previousValue != value) 
							|| (this._Type_Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Type_Product.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._Type_Product.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._IdTp = value.IdTp;
					}
					else
					{
						this._IdTp = default(int);
					}
					this.SendPropertyChanged("Type_Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Order_Ps(Order_P entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Order_Ps(Order_P entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Special")]
	public partial class Special : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdS;
		
		private string _Name;
		
		private EntitySet<Product> _Products;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdSChanging(int value);
    partial void OnIdSChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Special()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdS", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdS
		{
			get
			{
				return this._IdS;
			}
			set
			{
				if ((this._IdS != value))
				{
					this.OnIdSChanging(value);
					this.SendPropertyChanging();
					this._IdS = value;
					this.SendPropertyChanged("IdS");
					this.OnIdSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Special_Product", Storage="_Products", ThisKey="IdS", OtherKey="IdS")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Special = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Special = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Trademark")]
	public partial class Trademark : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdT;
		
		private string _Name;
		
		private string _Images;
		
		private int _IdTp;
		
		private EntitySet<Product> _Products;
		
		private EntityRef<Type_Product> _Type_Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdTChanging(int value);
    partial void OnIdTChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnImagesChanging(string value);
    partial void OnImagesChanged();
    partial void OnIdTpChanging(int value);
    partial void OnIdTpChanged();
    #endregion
		
		public Trademark()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			this._Type_Product = default(EntityRef<Type_Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdT", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdT
		{
			get
			{
				return this._IdT;
			}
			set
			{
				if ((this._IdT != value))
				{
					this.OnIdTChanging(value);
					this.SendPropertyChanging();
					this._IdT = value;
					this.SendPropertyChanged("IdT");
					this.OnIdTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Images", DbType="NVarChar(100)")]
		public string Images
		{
			get
			{
				return this._Images;
			}
			set
			{
				if ((this._Images != value))
				{
					this.OnImagesChanging(value);
					this.SendPropertyChanging();
					this._Images = value;
					this.SendPropertyChanged("Images");
					this.OnImagesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdTp", DbType="Int NOT NULL")]
		public int IdTp
		{
			get
			{
				return this._IdTp;
			}
			set
			{
				if ((this._IdTp != value))
				{
					if (this._Type_Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTpChanging(value);
					this.SendPropertyChanging();
					this._IdTp = value;
					this.SendPropertyChanged("IdTp");
					this.OnIdTpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Trademark_Product", Storage="_Products", ThisKey="IdT", OtherKey="IdT")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Type_Product_Trademark", Storage="_Type_Product", ThisKey="IdTp", OtherKey="IdTp", IsForeignKey=true)]
		public Type_Product Type_Product
		{
			get
			{
				return this._Type_Product.Entity;
			}
			set
			{
				Type_Product previousValue = this._Type_Product.Entity;
				if (((previousValue != value) 
							|| (this._Type_Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Type_Product.Entity = null;
						previousValue.Trademarks.Remove(this);
					}
					this._Type_Product.Entity = value;
					if ((value != null))
					{
						value.Trademarks.Add(this);
						this._IdTp = value.IdTp;
					}
					else
					{
						this._IdTp = default(int);
					}
					this.SendPropertyChanged("Type_Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Trademark = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Trademark = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Type_Product")]
	public partial class Type_Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdTp;
		
		private string _Name;
		
		private EntitySet<Product> _Products;
		
		private EntitySet<Trademark> _Trademarks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdTpChanging(int value);
    partial void OnIdTpChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Type_Product()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			this._Trademarks = new EntitySet<Trademark>(new Action<Trademark>(this.attach_Trademarks), new Action<Trademark>(this.detach_Trademarks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdTp", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdTp
		{
			get
			{
				return this._IdTp;
			}
			set
			{
				if ((this._IdTp != value))
				{
					this.OnIdTpChanging(value);
					this.SendPropertyChanging();
					this._IdTp = value;
					this.SendPropertyChanged("IdTp");
					this.OnIdTpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Type_Product_Product", Storage="_Products", ThisKey="IdTp", OtherKey="IdTp")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Type_Product_Trademark", Storage="_Trademarks", ThisKey="IdTp", OtherKey="IdTp")]
		public EntitySet<Trademark> Trademarks
		{
			get
			{
				return this._Trademarks;
			}
			set
			{
				this._Trademarks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Type_Product = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Type_Product = null;
		}
		
		private void attach_Trademarks(Trademark entity)
		{
			this.SendPropertyChanging();
			entity.Type_Product = this;
		}
		
		private void detach_Trademarks(Trademark entity)
		{
			this.SendPropertyChanging();
			entity.Type_Product = null;
		}
	}
}
#pragma warning restore 1591
